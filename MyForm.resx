<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>